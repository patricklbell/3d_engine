#load lib/constants.gl
#load lib/shadows.gl

// Takes normal, halfway vector between view angle and light angle
// Parameter a -> alpha describing roughness usually aplha = roughness^2
float distributionGGX(vec3 N, vec3 H, float roughness)
{
    float nom    = roughness*roughness*roughness*roughness;
    float NdotH  = max(dot(N, H), 0.0);
    float NdotH2 = NdotH*NdotH;
	
    float denom  = (NdotH2 * (nom - 1.0) + 1.0);
    denom        = PI * denom * denom;
	
    return nom / denom;
}
// Takes multiplier between 0 -> 1 with 0 being complete microfacet shadowing 
// and roughness
float geometrySchlickGGX(float NdotV, float roughness)
{
    float r = (roughness + 1.0);
    float k = (r*r) / 8.0;

    float num   = NdotV;
    float denom = NdotV * (1.0 - k) + k;

    return num / denom;
}
// Takes normal, camera view direction, light direction vector, surface roughness
float geometrySmith(vec3 N, vec3 V, vec3 L, float roughness)
{
    float NdotV = max(dot(N, V), 0.0);
    float NdotL = max(dot(N, L), 0.0);
    float ggx2  = geometrySchlickGGX(NdotV, roughness);
    float ggx1  = geometrySchlickGGX(NdotL, roughness);
	
    return ggx1 * ggx2;
}
vec3 fresnelSchlick(float cosTheta, vec3 F0)
{
    return F0 + (1.0 - F0) * pow(clamp(1.0 - cosTheta, 0.0, 1.0), 5.0);
}
// @note Radiance scaled color
vec3 brdfSchlickGGX(vec3 position, vec3 normal, vec3 albedo, float metallic, float roughness, vec3 light_dir, vec3 light_col, vec3 camera_position){
    vec3 view_dir = normalize(camera_position - position);
    vec3 halfway_dir = normalize(view_dir + light_dir);
    vec3 radiance    = light_col; 

    vec3 F0 = mix(vec3(0.04), albedo, metallic);

    vec3 F  = fresnelSchlick(max(dot(halfway_dir, view_dir), 0.0), F0);
    float NDF = distributionGGX(normal, halfway_dir, roughness);       
    float G   = geometrySmith(normal, view_dir, light_dir, roughness);       

    // Actually calculate Cook-Torrance brdf integral for one light direction
    vec3 numerator    = NDF * G * F;
    float denominator = 4.0 * max(dot(normal, view_dir), 0.0) * max(dot(normal, light_dir), 0.0)  + 0.0001;
    vec3 specular     = numerator / denominator;

    // Calculate relative diffuse and specular contributions such that total
    // energy is 1
    vec3 kS = F;
    vec3 kD = vec3(1.0) - kS;

    kD *= 1.0 - metallic;

    float NdotL = max(dot(normal, light_dir), 0.0);
    return (kD * albedo / PI + specular) * radiance * NdotL * shadowness(NdotL, position);
}
