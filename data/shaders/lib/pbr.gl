#load lib/constants.gl

#define IBL 1

#if IBL
layout(binding = 6) uniform samplerCube irradiance_map;
layout(binding = 7) uniform samplerCube prefiltered_map;
layout(binding = 8) uniform sampler2D   brdf_lut_map;  
#endif

// Takes normal, halfway vector between view angle and light angle
// Parameter a -> alpha describing roughness usually alpha = roughness^2
float distributionGGX(float NdotH, float roughness)
{
    float nom    = roughness*roughness;
    float NdotH2 = NdotH*NdotH;
	
    float denom  = (NdotH2 * (nom - 1.0) + 1.0);
    denom        = PI * denom * denom;
	
    return nom / denom;
}
// Takes multiplier between 0 -> 1 with 0 being complete microfacet shadowing 
// and roughness
float geometrySchlickGGX(float NdotV, float roughness)
{
    float r = (roughness + 1.0);
    float k = (r*r) / 8.0;

    float num   = NdotV;
    float denom = NdotV * (1.0 - k) + k;

    return num / denom;
}
float geometrySchlickGGXIBL(float NdotV, float roughness)
{
    float a = roughness;
    float k = (a * a) / 2.0;

    float nom   = NdotV;
    float denom = NdotV * (1.0 - k) + k;

    return nom / denom;
}
// Takes normal, camera view direction, light direction vector, surface roughness
float geometrySmith(float NdotV, float NdotL, float roughness)
{
    float ggx2  = geometrySchlickGGX(NdotV, roughness);
    float ggx1  = geometrySchlickGGX(NdotL, roughness);
	
    return ggx1 * ggx2;
}
float geometrySmithIBL(float NdotV, float NdotL, float roughness)
{
    float ggx2  = geometrySchlickGGXIBL(NdotV, roughness);
    float ggx1  = geometrySchlickGGXIBL(NdotL, roughness);
	
    return ggx1 * ggx2;
}
vec3 fresnelSchlick(float cosTheta, vec3 F0)
{
    return F0 + (1.0 - F0) * pow(clamp(1.0 - cosTheta, 0.0, 1.0), 5.0);
}

vec3 fresnelSchlickRoughness(float cosTheta, vec3 F0, float roughness)
{
    return F0 + (max(vec3(1.0 - roughness), F0) - F0) * pow(clamp(1.0 - cosTheta, 0.0, 1.0), 5.0);
} 

vec3 importanceSampleGGX(vec2 Xi, vec3 normal, vec3 tangent, vec3 bitangent, float roughness)
{
    float a = roughness*roughness;
	
    float phi = 2.0 * PI * Xi.x;
    float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a*a - 1.0) * Xi.y));
    float sinTheta = sqrt(1.0 - cosTheta*cosTheta);
	
    // from spherical coordinates to cartesian coordinates
    vec3 s;
    s.x = cos(phi) * sinTheta;
    s.y = sin(phi) * sinTheta;
    s.z = cosTheta;
	
    // from tangent-space vector to world-space sample vector
    s = tangent * s.x + bitangent * s.y + normal * s.z;
    return normalize(s);
}

const float MAX_REFLECTION_LOD = 4.0;

// @note Radiance scaled color
vec3 brdfSchlickGGX(vec3 position, vec3 normal, vec3 albedo, float metallic, float roughness, vec3 light_dir, vec3 light_col, vec3 camera_position, float ao, vec3 GI) {
    vec3 view_dir = normalize(camera_position - position);
    vec3 halfway_dir = normalize(view_dir + light_dir);
    vec3 radiance    = light_col; 
    float NdotH  = max(dot(normal, halfway_dir), 0.0);
    float NdotV = max(dot(normal, view_dir), 0.0);
    float NdotL = max(dot(normal, light_dir), 0.0);

    vec3 F0 = mix(vec3(0.04), albedo, metallic);
    vec3  F  = fresnelSchlick(max(dot(halfway_dir, view_dir), 0.0), F0);
    float NDF = distributionGGX(NdotH, roughness);   
    float G   = geometrySmith(NdotV, NdotL, roughness);       

    // Actually calculate Cook-Torrance brdf integral for one light direction
    vec3 numerator    = NDF * G * F;
    float denominator = 4.0 * max(dot(normal, view_dir), 0.0) * max(dot(normal, light_dir), 0.0)  + 0.0001;
    vec3 specular     = numerator / denominator;

    // Calculate relative diffuse and specular contributions such that total
    // energy is 1
    vec3 kS = F;
    vec3 kD = vec3(1.0) - kS;

    kD *= 1.0 - metallic;

    vec3 lo = (kD * albedo / PI + specular) * radiance * NdotL;
#if SHADOWS
    lo *=  shadowness(NdotL, position);
#endif

#if IBL
    vec3 reflect_dir = reflect(-view_dir, normal);   
    vec3 prefiltered_color = textureLod(prefiltered_map, reflect_dir,  roughness * MAX_REFLECTION_LOD).rgb; 

    vec3 env_F = fresnelSchlickRoughness(NdotV, F0, roughness);
    vec2 env_brdf = texture(brdf_lut_map, vec2(NdotV, roughness)).rg;
    vec3 env_specular = prefiltered_color * (env_F * env_brdf.x + env_brdf.y);

    vec3 irradiance = texture(irradiance_map, normal).rgb;
    vec3 env_diffuse    = irradiance * albedo * GI;
    vec3 ambient = kD * env_diffuse + env_specular; 
#else
    vec3 ambient = albedo * GI;
#endif
    
    return ao*(ambient + lo);
}
