#define SUN_POWER       0.3
#define AMBIENT_POWER   0.1

#if SHADOWS
#load lib/shadows.gl
#endif

// https://en.wikipedia.org/wiki/Blinn%E2%80%93Phong_reflection_model
vec3 blinnPhongLighting(vec3 position, vec3 normal, vec3 sun_direction, vec3 sun_color, vec3 camera_position, vec3 ambient_col, vec3 diffuse_col, vec3 specular_col, float shininess)
{

    float lambertian = max(dot(-sun_direction, normal), 0.0);
    float specular = 0.0;

    if (lambertian > 0.0) {
        vec3 V = normalize(camera_position - position);

        vec3 H = normalize(-sun_direction + V);
        float HdotN = max(dot(H, normal), 0.0);
        specular = pow(HdotN, shininess);
    }

    vec3 Lo = sun_color*SUN_POWER*(diffuse_col*lambertian + specular_col*specular);
#if SHADOWS
    float NdotL = max(dot(normal, sun_direction), 0.0);
    Lo *= 1.0 - shadowness(NdotL, position);
#endif

    return AMBIENT_POWER*ambient_col + Lo;
}

vec3 phongLighting(vec3 position, vec3 normal, vec3 sun_direction, vec3 sun_color, vec3 camera_position, vec3 ambient_col, vec3 diffuse_col, vec3 specular_col, float shininess)
{

    float lambertian = max(dot(-sun_direction, normal), 0.0);
    float specular = 0.0;

    if (lambertian > 0.0) {
        vec3 V = normalize(camera_position - position);

        vec3 R = reflect(sun_direction, normal);
        float RdotV = max(dot(R, V), 0.0);
        // note that the exponent is different here
        specular = pow(RdotV, shininess/4.0);
    }

    vec3 Lo = sun_color*SUN_POWER*(diffuse_col*lambertian + specular_col*specular);
#if SHADOWS
    float NdotL = max(dot(normal, sun_direction), 0.0);
    Lo *= 1.0 - shadowness(NdotL, position);
#endif

    return ambient_col + Lo;
}
