#ifdef COMPILING_VS
layout (location = 0) in vec3 in_position;
layout (location = 1) in vec2 in_texcoord;


out VS_FS {
    vec2 rgbNW;
    vec2 rgbNE;
    vec2 rgbSW;
    vec2 rgbSE;
    vec2 rgbM;
    vec3 position;
} vs_out;

uniform vec2 resolution;
uniform mat4 view;
uniform mat4 projection;

void main()
{
    vs_out.position = in_position;
    gl_Position = projection * view * vec4(in_position, 1.0);
    // @optimize? because part of multiplication is not needed
    gl_Position.z = gl_Position.w;

    //compute the texture coords and send them to fragment 
	vec2 inverse_vp = 1.0 / resolution.xy;
    vec2 fragcoord = in_texcoord * resolution;
	vs_out.rgbNW = (fragcoord + vec2(-1.0, -1.0)) * inverse_vp;
	vs_out.rgbNE = (fragcoord + vec2(1.0, -1.0)) * inverse_vp;
	vs_out.rgbSW = (fragcoord + vec2(-1.0, 1.0)) * inverse_vp;
	vs_out.rgbSE = (fragcoord + vec2(1.0, 1.0)) * inverse_vp;
	vs_out.rgbM = in_texcoord;
}
#endif

#ifdef COMPILING_FS

in VS_FS {
    vec2 rgbNW;
    vec2 rgbNE;
    vec2 rgbSW;
    vec2 rgbSE;
    vec2 rgbM;
    vec3 position;
} vs_in;

out vec4 out_color;

uniform vec2 resolution;
uniform sampler2D screen_map;
uniform sampler2D depth_map;
#ifdef BLOOM
uniform sampler2D bloom_map;
#endif

uniform samplerCube skybox;

// from: https://github.com/mattdesl/glsl-fxaa/blob/master/fxaa.glsl
#define FXAA_REDUCE_MIN   (1.0 / 128.0)
#define FXAA_REDUCE_MUL   (1.0 / 8.0)
#define FXAA_SPAN_MAX     8.0
//optimized version for mobile, where dependent 
//texture reads can be a bottleneck
vec4 fxaa(sampler2D tex, vec2 coord) {
    vec4 color;
    vec2 inverse_vp = vec2(1.0 / resolution.x, 1.0 / resolution.y);
    vec3 rgbNW = textureLod(tex, vs_in.rgbNW, 0.0).xyz;
    vec3 rgbNE = textureLod(tex, vs_in.rgbNE, 0.0).xyz;
    vec3 rgbSW = textureLod(tex, vs_in.rgbSW, 0.0).xyz;
    vec3 rgbSE = textureLod(tex, vs_in.rgbSE, 0.0).xyz;
    vec4 tex_col = textureLod(tex, vs_in.rgbM, 0.0);
    vec3 rgbM  = tex_col.xyz;

    vec3 luma = vec3(0.299, 0.587, 0.114);
    float lumaNW = dot(rgbNW, luma);
    float lumaNE = dot(rgbNE, luma);
    float lumaSW = dot(rgbSW, luma);
    float lumaSE = dot(rgbSE, luma);
    float lumaM  = dot(rgbM,  luma);
    float lumaMin = min(lumaM, min(min(lumaNW, lumaNE), min(lumaSW, lumaSE)));
    float lumaMax = max(lumaM, max(max(lumaNW, lumaNE), max(lumaSW, lumaSE)));
    
    vec2 dir;
    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));
    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));
    
    float dirReduce = max((lumaNW + lumaNE + lumaSW + lumaSE) *
                          (0.25 * FXAA_REDUCE_MUL), FXAA_REDUCE_MIN);
    
    float rcpDirMin = 1.0 / (min(abs(dir.x), abs(dir.y)) + dirReduce);
    dir = min(vec2(FXAA_SPAN_MAX, FXAA_SPAN_MAX),
              max(vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),
              dir * rcpDirMin)) * inverse_vp;
    
    vec3 rgbA = 0.5 * (
        textureLod(tex, coord * inverse_vp + dir * (1.0 / 3.0 - 0.5), 0.0).xyz +
        textureLod(tex, coord * inverse_vp + dir * (2.0 / 3.0 - 0.5), 0.0).xyz);
    vec3 rgbB = rgbA * 0.5 + 0.25 * (
        textureLod(tex, coord * inverse_vp + dir * -0.5, 0.0).xyz +
        textureLod(tex, coord * inverse_vp + dir * 0.5, 0.0).xyz);

    float lumaB = dot(rgbB, luma);
    if ((lumaB < lumaMin) || (lumaB > lumaMax)) {
        return vec4(rgbA, tex_col.a);
    } else {
        return vec4(rgbB, tex_col.a);
    }
}

vec4 texsample(sampler2D tex, vec2 coord) {
    vec2 inverse_vp = vec2(1.0 / resolution.x, 1.0 / resolution.y);
    
    return texture(tex, coord * inverse_vp);
}

#define NEAR            0.1
#define FAR             100.0
float depthToDist(float d){
  float z = 2.0*d - 1.0;
  return 2.0*NEAR*FAR/(FAR + NEAR - z*(FAR - NEAR));
}

void main()
{
    float dist = depthToDist(texsample(depth_map, gl_FragCoord.xy).r);
    vec3 hdr_color = fxaa(screen_map, gl_FragCoord.xy).xyz;

#ifdef BLOOM
    // Don't fxaa bloom since it is blurred
    vec3 bloom_color = texsample(bloom_map, gl_FragCoord.xy).xyz;
    hdr_color += bloom_color; // additive blending 
#endif

    const float gamma = 1.6;

    // reinhard tone mapping
    vec3 mapped = hdr_color / (hdr_color + vec3(1.0));

    // gamma correction 
    mapped = pow(mapped, vec3(1.0 / gamma));

    vec3 skybox_color = texture(skybox, vs_in.position).xyz;
    
    const float fog_near = FAR - 30.0;
    const float fog_far = FAR;
    float fog_amount = smoothstep(fog_near, fog_far, dist);
    vec3 blended = mix(mapped, skybox_color, fog_amount);
  
    out_color = vec4(blended, 1.0);
} 
#endif
