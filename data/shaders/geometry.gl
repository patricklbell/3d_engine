#if COMPILING_VS

layout(location = 0) in vec3 in_vertex;
layout(location = 1) in vec2 in_texcoord;
layout(location = 2) in vec3 in_normal;
layout(location = 3) in vec3 in_tangent;

out vec3 position;
out vec2 texcoord;
out mat3 TBN;

uniform mat4 MVP;
uniform mat4 model;

void main(){
	gl_Position = MVP * vec4(in_vertex, 1);
	position = gl_Position.xyz;
	texcoord = in_texcoord;
	vec3 T = normalize(vec3(model * vec4(in_tangent, 0.0)));
	vec3 N = normalize(vec3(model * vec4(-in_normal, 0.0)));
	// re-orthogonalize T with respect to N
	T = normalize(T - dot(T, N) * N);
	// then retrieve perpendicular vector B with the cross product of T and N
	vec3 B = cross(N, T);
	// Transpose of perpendicular matrix is inverse
	TBN = mat3(T, B, N);
}

#endif

#if COMPILING_FS

in vec3 position;
in vec2 texcoord;
in mat3 TBN;

uniform sampler2D diffuseMap;
uniform sampler2D normalMap; 

layout (location = 0) out vec3 out_position;
layout (location = 1) out vec3 out_diffuse;
layout (location = 2) out vec3 out_normal;

void main() {
	// obtain TBN normal from normal map in range [0,1]
    vec3 normal = texture(normalMap, texcoord).rgb;
    // transform normal vector to range [-1,1]
    normal = normalize(normal * 2.0 - 1.0); 
    // Transform normal from TBN to world space
    normal = -TBN * normal;

    out_position = position;
	out_diffuse = texture(diffuseMap, texcoord).xyz;
    out_normal = normal;
}

#endif
