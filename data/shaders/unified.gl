#if COMPILING_VS

layout (location = 0) in vec3 in_vertex;
layout (location = 1) in vec3 in_normal;
layout (location = 2) in vec3 in_tangent;
layout (location = 3) in vec2 in_texcoord;
//layout (location = 4) in vec3 in_bitangent; // @todo make bitangents streamed not calculated in vertex

out vec3 position;
out vec2 texcoord;
out mat3 TBN;

uniform mat4 mvp;
uniform mat4 model;

void main(){
    vec4 vertex = vec4(in_vertex, 1.0);
    gl_Position = mvp * vertex;
	position = (model * vertex).xyz;
	texcoord = in_texcoord;
	vec3 T = normalize(vec3(model * vec4(in_tangent, 0.0)));
	//vec3 B = normalize(vec3(model * vec4(in_bitangent, 0.0)));
	vec3 N = normalize(vec3(model * vec4(in_normal, 0.0)));
	// re-orthogonalize T with respect to N
	//T = normalize(T - dot(T, N) * N);
	// then retrieve perpendicular vector B with the cross product of T and N
	vec3 B = cross(N, T);
	// Transpose of perpendicular matrix is inverse
	TBN = mat3(T, B, N);
}

#endif

#if COMPILING_FS

#define PI                 3.14159265359
#define AMBIENT_INTENSITY  0.1
#define DIFFUSE_INTENSITY  0.9
#define PBR                1
#define NEAR            0.1
#define FAR             100.0

in vec3 position;
in vec2 texcoord;
in mat3 TBN;

layout (location = 0) out vec4 out_color;

#ifdef BLOOM
layout (location = 1) out vec4 out_bloom_color; 
#endif

uniform sampler2D normal_map;
uniform sampler2DArray shadow_map;
layout(std140, binding=0) uniform ShadowVP 
{
    mat4 shadow_vps[CASCADE_NUM + 1];
};
uniform float shadow_cascade_distances[CASCADE_NUM];
uniform float far_plane;
uniform mat4 view;

uniform sampler2D albedo_map;
#ifdef PBR
uniform sampler2D metallic_map;
uniform sampler2D roughness_map;
uniform sampler2D ao_map;
#endif

uniform vec3      sun_direction;
uniform vec3      sun_color;
uniform vec3      camera_position;

#ifndef PBR
uniform float     specular_exp;
uniform float     specular_int;
#endif

vec2 poisson_disk[16] = vec2[]( 
   vec2( -0.94201624, -0.39906216 ), 
   vec2( 0.94558609, -0.76890725 ), 
   vec2( -0.094184101, -0.92938870 ), 
   vec2( 0.34495938, 0.29387760 ), 
   vec2( -0.91588581, 0.45771432 ), 
   vec2( -0.81544232, -0.87912464 ), 
   vec2( -0.38277543, 0.27676845 ), 
   vec2( 0.97484398, 0.75648379 ), 
   vec2( 0.44323325, -0.97511554 ), 
   vec2( 0.53742981, -0.47373420 ), 
   vec2( -0.26496911, -0.41893023 ), 
   vec2( 0.79197514, 0.19090188 ), 
   vec2( -0.24188840, 0.99706507 ), 
   vec2( -0.81409955, 0.91437590 ), 
   vec2( 0.19984126, 0.78641367 ), 
   vec2( 0.14383161, -0.14100790 ) 
);

// Returns a random number based on a vec3 and an int.
float random(vec3 seed, int i){
	vec4 seed4 = vec4(seed,i);
	float dot_product = dot(seed4, vec4(12.9898,78.233,45.164,94.673));
	return fract(sin(dot_product) * 43758.5453);
}


// https://learnopengl.com/Guest-Articles/2021/CSM
// @note calling multiple times recalculates
float shadowness(float NdotL){
    // Select shadow correct projection for csm
    float frag_dist = abs((view * vec4(position, 1.0)).z);

    int layer = CASCADE_NUM;
    for (int i = 0; i < CASCADE_NUM; ++i)
    {
        if (frag_dist < shadow_cascade_distances[i])
        {
            layer = i;
            break;
        }
    }
        
    vec4 shadow_pos = shadow_vps[layer] * vec4(position, 1.0);
    // perform perspective divide
    vec3 shadow_coord = shadow_pos.xyz / shadow_pos.w;
    // transform to [0,1] range
    shadow_coord = shadow_coord * 0.5 + 0.5;

    // get depth of current fragment from light's perspective
    float shadow_depth = shadow_coord.z;

    // keep the shadow at 0.0 when outside the far_plane region of the light's frustum.
    if (shadow_depth > 1.0)
    {
        return 0.0;
    }

    // calculate bias (based on depth map resolution and slope)
    float bias = max(0.01 * (1.0 - NdotL), 0.005);
    if (layer == CASCADE_NUM)
    {
        bias *= 1 / (far_plane * 0.5f);
    }
    else
    {
        bias *= 1 / (shadow_cascade_distances[layer] * 0.5f);
    }
    // PCF
    float shadow = 0.0;
    vec2 texel_size = 1.0 / vec2(textureSize(shadow_map, 0));
    for(int x = -1; x <= 1; ++x)
    {
        for(int y = -1; y <= 1; ++y)
        {
            float pcf_depth = texture(shadow_map, vec3(shadow_coord.xy + vec2(x, y) * texel_size, layer)).r; 
            shadow += (shadow_depth - bias) > pcf_depth ? 1.0 : 0.0;        
        }    
    }
    shadow /= 9.0;
            
    return 1.0 - shadow;
}

#ifdef PBR
// Takes normal, halfway vector between view angle and light angle
// Parameter a -> alpha describing roughness usually aplha = roughness^2
float distributionGGX(vec3 N, vec3 H, float roughness)
{
    float nom    = roughness*roughness*roughness*roughness;
    float NdotH  = max(dot(N, H), 0.0);
    float NdotH2 = NdotH*NdotH;
	
    float denom  = (NdotH2 * (nom - 1.0) + 1.0);
    denom        = PI * denom * denom;
	
    return nom / denom;
}
// Takes multiplier between 0 -> 1 with 0 being complete microfacet shadowing 
// and roughness
float geometrySchlickGGX(float NdotV, float roughness)
{
    float r = (roughness + 1.0);
    float k = (r*r) / 8.0;

    float num   = NdotV;
    float denom = NdotV * (1.0 - k) + k;

    return num / denom;
}
// Takes normal, camera view direction, light direction vector, surface roughness
float geometrySmith(vec3 N, vec3 V, vec3 L, float roughness)
{
    float NdotV = max(dot(N, V), 0.0);
    float NdotL = max(dot(N, L), 0.0);
    float ggx2  = geometrySchlickGGX(NdotV, roughness);
    float ggx1  = geometrySchlickGGX(NdotL, roughness);
	
    return ggx1 * ggx2;
}
vec3 fresnelSchlick(float cosTheta, vec3 F0)
{
    return F0 + (1.0 - F0) * pow(clamp(1.0 - cosTheta, 0.0, 1.0), 5.0);
}
// @note Radiance scaled color
vec3 brdfSchlickGGX(vec3 position, vec3 normal, vec3 albedo, vec3 light_dir, vec3 light_col){
    vec3 view_dir = normalize(camera_position - position);
    vec3 halfway_dir = normalize(view_dir + light_dir);
    vec3 radiance    = light_col; 
    float metallic   = texture(metallic_map, texcoord).r;
    float roughness  = texture(roughness_map, texcoord).r; 

    vec3 F0 = mix(vec3(0.04), albedo, metallic);

    vec3 F  = fresnelSchlick(max(dot(halfway_dir, view_dir), 0.0), F0);
    float NDF = distributionGGX(normal, halfway_dir, roughness);       
    float G   = geometrySmith(normal, view_dir, light_dir, roughness);       

    // Actually calculate Cook-Torrance brdf integral for one light direction
    vec3 numerator    = NDF * G * F;
    float denominator = 4.0 * max(dot(normal, view_dir), 0.0) * max(dot(normal, light_dir), 0.0)  + 0.0001;
    vec3 specular     = numerator / denominator;

    // Calculate relative diffuse and specular contributions such that total
    // energy is 1
    vec3 kS = F;
    vec3 kD = vec3(1.0) - kS;

    kD *= 1.0 - metallic;

    float NdotL = max(dot(normal, light_dir), 0.0);
    return (kD * albedo / PI + specular) * radiance * NdotL * shadowness(NdotL);
}
#endif

#ifndef PBR
vec3 calcDirectionalLight(vec3 in_position, vec3 in_normal)
{
    vec3 ambient_col = sun_color * AMBIENT_INTENSITY;
    float diffuse_factor = dot(in_normal, -sun_direction);

    vec3 diffuse_col = vec3(0, 0, 0);
    vec3 specular_col = vec3(0, 0, 0);

    if (diffuse_factor > 0) {
        diffuse_col = sun_color * DIFFUSE_INTENSITY * diffuse_factor;
        vec3 view_dir = normalize(camera_position - in_position);
        vec3 halfway_dir = normalize(-sun_direction + view_dir);
        float specular_factor = dot(in_normal, halfway_dir);
        if (specular_factor > 0) {
            specular_factor = pow(specular_factor, specular_exp);
            specular_col = sun_color * specular_int * specular_factor;
        }
    }

    return (ambient_col + specular_col + diffuse_col);
}
#endif

void main() {
	// obtain TBN normal from normal map in range [0,1]
    vec3 normal = texture(normal_map, texcoord).rgb;
    //// transform normal vector to range [-1,1]
    normal = normalize(normal * 2.0 - 1.0); 
    //// Transform normal from tangent to world space
    normal = TBN * normal;
    vec3 albedo = texture(albedo_map, texcoord).xyz;


    // @debug, renders different layers of csm in colors
    //float frag_dist = abs((view * vec4(position, 1.0)).z);
    //int layer = CASCADE_NUM;
    //for (int i = 0; i < CASCADE_NUM; ++i)
    //{
    //    if (frag_dist < shadow_cascade_distances[i])
    //    {
    //        layer = i;
    //        break;
    //    }
    //}
    //    
    //const vec3 colors[] = {vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0), vec3(1.0,
    //        0.0, 1.0)};
    //float NdotL = dot(normal, -sun_direction);
    //out_color = vec4(vec3(shadowness(NdotL)*colors[layer]), 1.0);

#ifndef PBR
    // Treats albedo as diffuse texture
    vec3 hdr_color = albedo * calcDirectionalLight(position, normal);
#endif

#ifdef PBR
    float ao = texture(ao_map, texcoord).r; 
    vec3 ambient = vec3(0.03) * albedo * ao;
    vec3 hdr_color = ambient + brdfSchlickGGX(position, normal, albedo, -sun_direction, sun_color);
#endif

    out_color = vec4(hdr_color, 1.0);

#ifdef BLOOM
    // If we are doing bloom write to second buffer
    float brightness = dot(hdr_color, vec3(0.2126, 0.7152, 0.0722));
    if(brightness > 1.0)
        out_bloom_color = vec4(hdr_color, 1.0);
    else
        out_bloom_color = vec4(0.0, 0.0, 0.0, 1.0);
#endif
}

#endif
