#if COMPILING_VS

layout (location = 0) in vec3 in_vertex;
layout (location = 1) in vec2 in_texcoord;

out vec2 texcoord;

void main(){
    gl_Position = vec4(in_vertex,1.0);
    texcoord = in_texcoord;
}

#endif

#if COMPILING_FS

in vec2 texcoord;

out vec3 out_color;

#load lib/constants.gl
#load lib/noise.gl
#load lib/pbr.gl

// https://learnopengl.com/PBR/IBL/Specular-IBL
// Creates LUT for each NdotL and roughness, to precompute brdf geometry function
const uint SAMPLE_COUNT = 1024u;
vec2 integrateBRDF(float NdotV, float roughness)
{
    vec3 V;
    V.x = sqrt(1.0 - NdotV*NdotV);
    V.y = 0.0;
    V.z = NdotV;

    float A = 0.0;
    float B = 0.0;

    vec3 N = vec3(0.0, 0.0, 1.0);
    vec3 up        = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
    vec3 tangent   = normalize(cross(up, N));
    vec3 bitangent = cross(N, tangent);

    for(uint i = 0u; i < SAMPLE_COUNT; ++i)
    {
        vec2 Xi = hammersley(i, SAMPLE_COUNT);
        vec3 H  = importanceSampleGGX(Xi, N, tangent, bitangent, roughness);
        vec3 L  = normalize(2.0 * dot(V, H) * H - V);

        float NdotL = max(L.z, 0.0);

        if(NdotL > 0.0f)
        {
            float NdotH = max(H.z, 0.0);
            float VdotH = max(dot(V, H), 0.0);

            float G = geometrySmithIBL(NdotV, NdotL, roughness);
            float G_Vis = (G * VdotH) / (NdotH * NdotV);
            float Fc = pow(1.0 - VdotH, 5.0);

            A += (1.0 - Fc) * G_Vis;
            B += Fc * G_Vis;
        }
    }
    A /= float(SAMPLE_COUNT);
    B /= float(SAMPLE_COUNT);
    return vec2(A, B);
}

void main()
{
    vec2 integrated_brdf = integrateBRDF(texcoord.x, texcoord.y);
    out_color = vec3(integrated_brdf, 0.0f);
}
#endif
