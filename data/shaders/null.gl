#ifdef COMPILING_VS
layout (location = 0) in vec3 in_vertex;

#if VEGETATION
layout (location = 3) in vec2 in_texcoord;
#endif

out VS_OUT {
    vec2 texcoord;
} vs_out;
uniform float time;

#if ANIMATED_BONES
layout (location = 5) in ivec4 in_bone_ids;
layout (location = 6) in vec4  in_weights;
layout(std140, binding=1) uniform BoneMatrices 
{
    mat4 bone_matrices[MAX_BONES];
};
#endif

uniform mat4 model;

void main() {
#if ANIMATED_BONES
    mat4 bone_transform = mat4(0.0);
    for(int i = 0 ; i < MAX_BONE_WEIGHTS; i++) {
        if(in_bone_ids[i] == -1) 
            continue;

        bone_transform += bone_matrices[in_bone_ids[i]] * in_weights[i];
    }

    vec4 vertex = bone_transform * vec4(in_vertex, 1.0);
#else
    vec4 vertex = vec4(in_vertex, 1.0);
#endif

#if VEGETATION
    // @todo make good vegetation movement 
    vs_out.texcoord = vec2(in_texcoord.y, in_texcoord.x); // I don't know why this is needed
    vertex.x += (1.0 - vs_out.texcoord.x)*0.3*sin(1.8*time + (1.0 - vs_out.texcoord.x*vs_out.texcoord.x)*7.0*vs_out.texcoord.x);
#endif

    gl_Position = model * vertex;
}

#endif

#ifdef COMPILING_GS
layout(triangles, invocations=INVOCATIONS) in;
layout(triangle_strip, max_vertices=3) out;
layout(std140, binding=0) uniform ShadowVP 
{
    mat4 shadow_vps[INVOCATIONS];
};

#if ALPHA_TEXTURE
in VS_OUT {
    vec2 texcoord;
} gs_in[];  
out vec2 texcoord;
#endif

void main()
{
    for(int i=0; i < 3; i++){
        gl_Position = shadow_vps[gl_InvocationID] * gl_in[i].gl_Position;
        gl_Layer    = gl_InvocationID;
#if ALPHA_TEXTURE
        texcoord = gs_in[i].texcoord;
#endif
        EmitVertex();
    }
    EndPrimitive();
}

#endif

#ifdef COMPILING_FS

#if ALPHA_TEXTURE
in vec2 texcoord;

layout (location = 0) uniform sampler2D image;
#endif

void main()
{
#if ALPHA_TEXTURE
    if(texture(image, texcoord).a < 0.1) {
        discard;
    }
#endif
} 
#endif
